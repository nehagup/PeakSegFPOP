PeakSegFPOP

Command line limited memory PeakSeg functional pruning optimal
partitioning algorithm.

[[https://travis-ci.org/tdhock/PeakSegFPOP][https://travis-ci.org/tdhock/PeakSegFPOP.png?branch=master]]

** Installation

#+BEGIN_SRC shell-script
sudo aptitude install libdb6.0++-dev libdb6.0-stl-dev
make
#+END_SRC

** Usage

#+BEGIN_SRC shell-script
PeakSegFPOP coverage.bedGraph penalty [tmp.db]
#+END_SRC

The first argument =coverage.bedGraph= is a plain text file with 3
columns: chromStart, chromEnd, coverage (all integers).

The second argument =penalty= is a non-negative penalty value, for
example 0.1 or 100.

The third argument =tmp.db= is optional. It is the path for a
temporary file which takes O(N log N) disk space (N = number of lines
in coverage.bedGraph). In practice you can expect the size of the
temporary file and the computation time to be as in the table
below. Min and max values show the variation over several values of
the penalty parameter, on an Intel(R) Core(TM) i7 CPU 930 @ 2.80GHz.

|       N | min(MB) | max(MB) | min(time) | max(time) |
|---------+---------+---------+-----------+-----------|
|   10000 |      12 |      43 | 1 sec     | 2 sec     |
|  100000 |     189 |     627 | 12 sec    | 25 sec    |
| 1000000 |    3462 |    7148 | 3 min     | 5 min     |
| 4485563 |   20391 |   32930 | 17 min    | 29 min    |

** Related work

An in-memory implementation of PeakSegFPOP is available in the [[https://github.com/tdhock/coseg][coseg]] R
package. 

| implementation | time       | memory     | disk       |
|----------------+------------+------------+------------|
| command line   | O(N log N) | O(log N)   | O(N log N) |
| R pkg coseg    | O(N log N) | O(N log N) | 0          |

Note that although both implementations are O(N log N) time complexity
for N data points, the command line program is slower due to disk
read/write overhead.
