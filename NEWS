TODOs

test cases.

input data error checking.

2016.09.26

_loss.tsv file includes mean and max number of intervals stored by the
algorithm. This info is not useful for peak detection but it is useful
for understanding the functional pruning algorithm. For example
plotting the mean number of intervals versus execution time is roughly
linear, which explains why the algorithm takes longer for larger
penalty values.

Bugfix for min-less: only add a constant piece at the end if we need to.

2016.09.25

computeTarget.R -> compute_coverage_target.R which creates
coverage.bedGraph if it does not already exist, and then creates
target.bed if the problem has labels.

problemDB.R -> create_problems.R which now does no computation, but
instead just creates coverage.bedGraph.sh for each problem, which
calls compute_coverage_target.R.

2016.09.23

PeakSegFPOP exits quickly for the special case of penalty=Inf, which
means 0 peaks (1 segment mean with no changes).

New R scripts to help when running PeakSegFPOP on the whole genome.

gap2problems.R inputs chrom sizes and gap info, and outputs a bed file
for each separate segmentation problem.

problemDB.R inputs a segmentation problem bed file and a labels bed
file for one sample, and creates sub-directories for each labeled
segmentation problem.

computeTarget.R inputs a labeled segmentation problem directory, and
runs PeakSegFPOP several times, until the target interval is found.

2016.09.22

output loss file.

2016.08.09

output segments file.

2016.08.08

First Berkeley DB on-disk solver code working.